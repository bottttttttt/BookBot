import re

import telebot
from telebot import types
import sqlite3 as sq
import config
import markups as nav

bot = telebot.TeleBot(config.TOKEN)
db = 'LIB.db'
conn = sq.connect(db)
reader_num = None #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
Name = None
Title = None
title_add= None
autor_f= None
autor_i= None
date = None
genre = None
description = None

autor_name = None
autor_surname = None
autor_date = None
autor_id = None
autor_birth = None
autor_death = None

@bot.message_handler(commands=['add'])
def autor_add(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è")


@bot.message_handler(commands=['autor'])
def autor_test(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()

    cur.execute('SELECT * FROM autor')
    autor_test = cur.fetchall()

    info = ''
    for el in autor_test:
        info += f'{el[0]}) {el[1]} {el[2]}\n'
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, info)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    btn2 = types.KeyboardButton('üîç –ü–æ–∏—Å–∫')
    markup.add(btn1,btn2)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup=markup)
    #bot.register_next_step_handler(message, on_click)

@bot.message_handler(content_types=['text'])
def on_click(message):
    if message.text == 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞')
        bot.register_next_step_handler(message, login_1)

    elif message.text == 'üîç –ü–æ–∏—Å–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üîç –ê–≤—Ç–æ—Ä–∞ –ø–æ [–∏–º–µ–Ω–∏ —Ñ–∞–º–∏–ª–∏–∏]')
        markup.add(btn1)
        btn2 = types.KeyboardButton('üîç –ö–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
        btn3 = types.KeyboardButton('üîç –ö–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä–∞–º')
        markup.add(btn2, btn3)
        back = types.KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back)
        bot.send_message(message.chat.id, text="—É—Ç–æ—á–Ω–∏—Ç–µ –ø–ª–∏–∑", reply_markup=markup)
        bot.register_next_step_handler(message, search)

    elif (message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        button2 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, text="üëæ –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..")
@bot.message_handler(content_types=['text'])
def search(message):
    if message.text == 'üîç –ö–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä–∞–º':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('—Ä–æ–º–∞–Ω', callback_data='—Ä–æ–º–∞–Ω')
        markup.row(btn1)
        btn2 = types.InlineKeyboardButton('–¥–µ—Ç–µ–∫—Ç–∏–≤', callback_data='–¥–µ—Ç–µ–∫—Ç–∏–≤')
        markup.row(btn2)
        btn3 = types.InlineKeyboardButton('–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è', callback_data='–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è')
        markup.row(btn3)
        bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä ü§ì', reply_markup=markup)
        #bot.register_next_step_handler(message, genre)
    elif message.text == 'üîç –ö–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ')
        bot.register_next_step_handler(message, search_title)

    elif message.text == 'üîç –ê–≤—Ç–æ—Ä–∞ –ø–æ [–∏–º–µ–Ω–∏ —Ñ–∞–º–∏–ª–∏–∏]':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞')
        bot.register_next_step_handler(message, search_autor_name)

    elif (message.text == "‚Ü©Ô∏è –Ω–∞–∑–∞–¥"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn2 = types.KeyboardButton('üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
        btn3 = types.KeyboardButton('üîç –ü–æ –∂–∞–Ω—Ä–∞–º')
        markup.add(btn2, btn3)
    else:
        bot.send_message(message.chat.id, text="üëæ –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..")

@bot.message_handler(content_types=['text'])
def search_autor_name(message):
    global autor_f
    autor_f = message.text
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    cur.execute("SELECT autor_f FROM autor WHERE autor_f = ?", (autor_f,))
    autor= cur.fetchall()
    if (not bool(len(autor))):
        bot.send_message(message.chat.id, 'ü§∑ –¢–∞–∫–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ')
    else:
        bot.register_next_step_handler(message, search_autor)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞')
    cur.close()
    conn.close()
def search_autor(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    global autor_i
    global autor_f
    autor_i = message.text
    cur.execute("SELECT autor_id FROM autor WHERE autor_i = ?", (autor_i,))
    autor = cur.fetchall()
    if (not bool(len(autor))):
        bot.send_message(message.chat.id, 'ü§∑ –¢–∞–∫–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ')
    else:
        global autor_id
        bot.send_message(message.chat.id, f'1 {autor_id}')
        for el in autor:
            autor_id = f'{el[0]}'
        #autor_id1 = str(autor)
        #autor_id = autor_id1.replace("[('", '')
        #autor_id = autor_id.replace("',)]", '')
        bot.send_message(message.chat.id, f'2 {autor_id}')

        markup = types.InlineKeyboardMarkup()
        btn1 = types.KeyboardButton('‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ')
        markup.add(types.InlineKeyboardButton('‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ', callback_data='‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ'))
        bot.send_message(message.chat.id, f'–ê–≤—Ç–æ—Ä {autor_i} {autor_f} –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ', reply_markup=markup)
        #bot.register_next_step_handler(message, search_title_2)
    cur.close()
    conn.close()

@bot.message_handler(content_types=['text'])
def search_title(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    global Title
    Title = message.text
    cur.execute("SELECT title FROM book WHERE title = ?", (Title,))
    title_1 = cur.fetchall()
    if (not bool(len(title_1))):
        bot.send_message(message.chat.id, 'ü§∑ –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    else: #–≤—ã–≤–æ–¥ –∫–Ω–∏–≥
        markup = types.InlineKeyboardMarkup()
        btn1 = types.KeyboardButton('‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ')
        markup.add(types.InlineKeyboardButton('‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ', callback_data='‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ'))
        global Name
        bot.send_message(message.chat.id, f'–ö–Ω–∏–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{Title}" –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ', reply_markup=markup)
        #bot.register_next_step_handler(message, search_title_2)
    cur.close()
    conn.close()

#@bot.message_handler(content_types=['text'])


@bot.callback_query_handler(func=lambda callback: True)
def mega_search(callback):
    if callback.data == '‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ':
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        global autor_id

        cur.execute("SELECT autor_death FROM autor WHERE autor_id = ?", (autor_id,))
        death = cur.fetchall()
        for el in death:
            death_info = {el[0]}
        cur.execute("SELECT * FROM autor WHERE autor_id = ?", (autor_id,))
        autor = cur.fetchall()
        autor_info = ''
        bot.send_message(callback.message.chat.id, f'3 {death_info}')
        for el in autor:
            if (death_info=={None}): #—ç—Ç–æ —É–∂–∞—Å, –∞ –Ω–µ —É—Å–ª–æ–≤–∏–µ...
                autor_info = f'{el[1]} {el[2]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[3]}'
            else:
                autor_info = f'{el[1]} {el[2]}\n–î–∞—Ç—ã –∂–∏–∑–Ω–∏: {el[3]} - {el[4]}'
        bot.send_message(callback.message.chat.id, autor_info)
        cur.close()
        conn.close()

    elif (callback.data =='—Ä–æ–º–∞–Ω')or(callback.data == '–¥–µ—Ç–µ–∫—Ç–∏–≤')or(callback.data == '–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è'):
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        genre = callback.data
        bot.send_message(callback.message.chat.id, f'–í—Å–µ –∫–Ω–∏–≥–∏ –∂–∞–Ω—Ä–∞ {callback.data}:')
        cur.execute("SELECT title, autor_f, autor_i, date FROM book WHERE genre = ?", (callback.data,))
        book = cur.fetchall()
        book_info = ''
        for el in book:
            book_info += f'{el[0]}\n–ê–≤—Ç–æ—Ä: {el[1]} {el[2]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {el[3]}\n-- -- --\n'
        bot.send_message(callback.message.chat.id, book_info)
        cur.close()
        conn.close()

    elif callback.data == '‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ':
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        global Title
        bot.send_message(callback.message.chat.id, Title)
        cur.execute("SELECT autor_f, autor_i, date, genre, description FROM book WHERE title = ?", (Title,))
        book = cur.fetchall()
        book_info = ''
        for el in book:
            book_info += f'–ê–≤—Ç–æ—Ä: {el[0]} {el[1]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {el[2]}\n–ñ–∞–Ω—Ä: {el[3]}\n ...\n{el[4]}\n'
        bot.send_message(callback.message.chat.id, book_info)
        cur.close()
        conn.close()

    elif (callback.data =='—Ä–æ–º–∞–Ω')or(callback.data == '–¥–µ—Ç–µ–∫—Ç–∏–≤')or(callback.data == '–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è'):
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        genre = callback.data
        bot.send_message(callback.message.chat.id, f'–í—Å–µ –∫–Ω–∏–≥–∏ –∂–∞–Ω—Ä–∞ {callback.data}:')
        cur.execute("SELECT title, autor_f, autor_i, date FROM book WHERE genre = ?", (callback.data,))
        book = cur.fetchall()
        book_info = ''
        for el in book:
            book_info += f'{el[0]}\n–ê–≤—Ç–æ—Ä: {el[1]} {el[2]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {el[3]}\n-- -- --\n'
        bot.send_message(callback.message.chat.id, book_info)
        cur.close()
        conn.close()



#@bot.message_handler(content_types=['text'])
def login_1(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    global reader_num
    reader_num = message.text
    # cur.execute("SELECT name FROM user WHERE reader_num = 123")
    cur.execute("SELECT name FROM user WHERE reader_num = ?", (reader_num,))
    global Name
    Name = cur.fetchall()
    if (not bool(len(Name))):
        bot.send_message(message.chat.id, 'ü§∑ –ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    else:
        #bot.send_message(message.chat.id, Name)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å ')
        bot.register_next_step_handler(message, login_2)


def login_2(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    global reader_num
    password = message.text
    # cur.execute("SELECT name FROM user WHERE reader_num = 123")
    cur.execute("SELECT password FROM user WHERE reader_num = ?", (reader_num,))
    login_2 = cur.fetchall()
    #–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ñ–∞—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    password_1 = str(login_2)
    res_pass = password_1.replace("[('", '')
    res_pass = res_pass.replace("',)]", '')
    #—Ç–∞–Ω—Ü—ã —Å –±—É–±–Ω–æ–º

    if (reader_num=='0')and(res_pass == password):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn0 = types.KeyboardButton('üë§ –°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π')
        markup.add(btn0)
        btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É üìö')
        btn2 = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É üìö')
        markup.add(btn1, btn2)
        btn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚úçÔ∏è')
        btn4 = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚úçÔ∏è')
        markup.add(btn3, btn4)
        back = types.KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markup)
        bot.register_next_step_handler(message, admin)

    elif res_pass == password:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üìö –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–Ω–∏–≥')
        markup.add(btn1)
        back = types.KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back)
        global Name
        Name_new = str(Name)
        Name_new_new = Name_new.replace("[('", '')
        Name_new_new = Name_new_new.replace("',)]", '')
        bot.send_message(message.chat.id, f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {Name_new_new}!', reply_markup=markup)
        bot.register_next_step_handler(message, my_list)
    else:
        bot.send_message(message.chat.id, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω')


def admin(message):
    if message.text == 'üë§ –°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π':
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        #bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–Ω–∏–≥ —Å –¥–∞—Ç–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: ')
        cur.execute("SELECT * FROM user")
        my_list = cur.fetchall()
        list_info = ''
        for el in my_list:
            list_info += f'{el[0]}) {el[3]} {el[4]}\n–ù–æ–º–µ—Ä —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞: {el[1]}\n–ü–∞—Ä–æ–ª—å: {el[2]}\n...\n'
        bot.send_message(message.chat.id, list_info)
        cur.close()
        conn.close()
        bot.register_next_step_handler(message, admin)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚úçÔ∏è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
        bot.register_next_step_handler(message, addautor_f)

    elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚úçÔ∏è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        bot.register_next_step_handler(message, delete_autor_f)

    elif message.text =='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É üìö':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏')
        bot.register_next_step_handler(message, addbook_title)

    elif message.text =='üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É üìö':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        bot.register_next_step_handler(message, delete)

def delete_autor_f(message):
    global autor_f
    autor_f = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞')
    bot.register_next_step_handler(message, delete_autor)
def delete_autor(message):
    global autor_i
    global autor_f
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    autor_i = message.text.strip()
    cur.execute(f"SELECT autor_f FROM autor WHERE (autor_f = '{autor_f}') AND (autor_i = '{autor_i}')")
    autor = cur.fetchall()
    if (not bool(len(autor))):
        bot.send_message(message.chat.id, 'ü§∑ –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
    else:
        cur.execute(f"DELETE FROM autor WHERE (autor_f = '{autor_f}') AND (autor_i = '{autor_i}')")
        conn.commit
        bot.send_message(message.chat.id, '‚úÖ –ê–≤—Ç–æ—Ä —É–¥–∞–ª–µ–Ω')
    cur.close()
    conn.close()

def addautor_f(message):
    global autor_f
    autor_f = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞')
    bot.register_next_step_handler(message, addautor_i)

def addautor_i(message):
    global autor_i
    autor_i = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞')
    bot.register_next_step_handler(message, addautor_birth)

def addautor_birth(message):
    global autor_birth
    autor_birth = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–º–µ—Ä—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å\n–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"')
    bot.register_next_step_handler(message, addautor)

def addautor(message):
    death = message.text.strip()
    global autor_death
    if death != '–Ω–µ—Ç':
        autor_death = death
    global autor_f
    global autor_i
    global autor_birth

    conn = sq.connect('LIB.db')
    cur = conn.cursor()

    if death != '–Ω–µ—Ç':
        autor_death = death
        cur.execute(f"INSERT INTO autor ("
                    f"autor_i, autor_f, autor_birth, autor_death"
                    f") VALUES ('%s','%s','%s','%s'"
                    f")" % (autor_i, autor_f, autor_birth, autor_death))
        conn.commit()
    else:
        cur.execute(f"INSERT INTO autor ("
                    f"autor_i, autor_f, autor_birth"
                    f") VALUES ('%s','%s','%s'"
                    f")" % (autor_i, autor_f, autor_birth))
        conn.commit()

    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ:")
    cur.execute("SELECT * FROM autor WHERE autor_f = ?", (autor_f,))
    autor = cur.fetchall()
    autor_info = ''
    for el in autor:
        if death != '–Ω–µ—Ç':
            autor_info += f'{el[1]} {el[2]}\n–î–∞—Ç—ã –∂–∏–∑–Ω–∏: {el[3]} - {el[4]}\n'
        else:
            autor_info += f'{el[1]} {el[2]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[3]}\n'
    bot.send_message(message.chat.id, autor_info)
    cur.close()
    conn.close()
    bot.register_next_step_handler(message, admin)

def delete(message):
    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    book_del = message.text.strip()
    cur.execute("SELECT title FROM book WHERE title = ?", (book_del,))
    title_1 = cur.fetchall()
    if (not bool(len(title_1))):
        bot.send_message(message.chat.id, 'ü§∑ –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    else:  # –≤—ã–≤–æ–¥ –∫–Ω–∏–≥
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        cur.execute(f"DELETE FROM book WHERE title = '{book_del}'")
        conn.commit
        bot.send_message(message.chat.id, '‚úÖ –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞')
    cur.close()
    conn.close()

def addbook_title(message):
    global title_add
    title_add = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞')
    bot.register_next_step_handler(message, addbook_f)

def addbook_f(message):
    global autor_f
    autor_f = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞')
    bot.register_next_step_handler(message, addbook_i)

def addbook_i(message):
    global autor_i
    autor_i = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    bot.register_next_step_handler(message, addbook_date)

def addbook_date(message):
    global date
    date = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏')
    bot.register_next_step_handler(message, addbook_genre)

def addbook_genre(message):
    global genre
    genre = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏')
    bot.register_next_step_handler(message, addbook)

def addbook(message):
    global description
    description = message.text.strip()
    global genre
    global date
    global autor_i
    global autor_f
    global title_add

    conn = sq.connect('LIB.db')
    cur = conn.cursor()
    cur.execute(f"INSERT INTO book ("
                f"autor_f, autor_i, title, date, genre, description"
                f") VALUES ('%s','%s','%s','%s','%s','%s'"
                f")" % (autor_f, autor_i, title_add, date, genre, description))
    conn.commit()

    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ:")
    cur.execute("SELECT title, autor_f, autor_i, genre, date, description FROM book WHERE title = ?", (title_add,))
    book = cur.fetchall()
    book_info = ''
    for el in book:
        book_info += f'{el[0]}\n–ê–≤—Ç–æ—Ä: {el[1]} {el[2]}\n–ñ–∞–Ω—Ä: {el[3]}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {el[4]}\n-- -- --\n{el[5]}\n'
    bot.send_message(message.chat.id, book_info)
    cur.close()
    conn.close()
    bot.register_next_step_handler(message, admin)

@bot.message_handler(content_types=['text'])
def my_list(message):
    if message.text == 'üìö –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–Ω–∏–≥':
        conn = sq.connect('LIB.db')
        cur = conn.cursor()
        global reader_num
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–Ω–∏–≥ —Å –¥–∞—Ç–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: ')
        cur.execute("SELECT title, date_in, date_out FROM list WHERE reader_num =?", (reader_num,))
        my_list = cur.fetchall()
        list_info = ''
        for el in my_list:
            list_info += f'{el[1]} - {el[2]} || {el[0]} \n'
        bot.send_message(message.chat.id, list_info)
        cur.close()
        conn.close()
    elif (message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        button2 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, text="üëæ –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..")

@bot.message_handler()
def info(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}')
    elif message.text.lower()== 'id':
        bot.reply_to(message, f'ID:  {message.from_user.id}')


bot.infinity_polling()
#bot.polling(none_stop=True)